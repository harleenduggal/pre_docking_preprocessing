import Bio.PDBfrom Bio.PDB import PDBListimport urllib.requestfrom Bio.PDB import PDBIOimport osfrom Bio.PDB import *def download_pdb(ids):    pd = ["1COH"]    pdbl = PDBList()    parser = PDBParser(PERMISSIVE=True, QUIET=True)  # recruts the retrieval class    for pd_1 in pd:        pdbl.retrieve_pdb_file(pd_1, pdir=".", file_format='pdb')        structure = parser.get_structure(pd_1, "pdb" + pd_1 + ".ent")        process_structures(structure)        #mutation(structure)        missing_residue(structure)        resolutions(structure)        #hetero(structure)    return Trueclass ChainSelect(Select):    def accept_chain(self, chain):        for chain in chain.get_id():        #if chain.get_id() in "A":            return True        else:            return Falsedef process_structures(structure):    model = structure[0]    os.system('mkdir '+structure.get_id())    for chain in model:        os.system('mkdir '+structure.get_id()+"\\"+chain.get_id())        io = PDBIO()        io.set_structure(structure)        io.save(structure.get_id()+"\\"+chain.get_id()+"\\"+chain.get_id()+".pdb", ChainSelect())    return Truedef mutation(structure):  for model in structure.get_list():    for chain in model.get_list():        for residue in chain.get_list():            if residue.is_disordered():                resseq = residue.get_id()[1]                resname = residue.get_resname()                model_id = model.get_id()                chain_id = chain.get_id()                print(model_id, chain_id, resname, resseq)def resolutions(structure):  resolu= (structure.header['resolution'])  max_resol= 2.5  if max_resol> resolu:    print ("minimization not needed", resolu)def missing_residue(structure):    c = 0    for model in structure:        #print(model.get_id())        for chain in model:            print(chain.get_id())            for residue in chain:                c = c + 1                b = residue.get_resname                # print(residue.get_resname())            print("length of chain", c)            initial = 10 * c / 100            terminal = 90 * c / 100        print("initial", initial, "terminal", terminal)        miss_res = structure.header['missing_residues']    #print(miss_res)        protein_size = (structure.header['has_missing_residues'])    #print(protein_size)        print("protein residues missing ",(protein_size))        if protein_size == True :            mis_res = []        #print(miss_res[0])            mis_res_pos = [item['ssseq'] for item in miss_res]     #print((mis_res_pos))            modellin = []            for e in mis_res_pos:                if initial < e and terminal > e:                    modellin.append(e)                print(modellin, "residues that need modelling")        if protein_size == False:            #print(protein_size)            res = (structure.header['resolution'])            if res > 2.5:                print("needs minimization")                for model in structure:                    print(model.get_list())                    for chain in model:                        path_save = structure.get_id()                        ck=chain.get_id()                        print(ck)                        fullpath= path_save+'\\'+ck                        print(fullpath)                        save_c=chain.get_id()                    #c_p=path_sav+save_c                        print(save_c)                        name_of_f= (path_save+"_"+save_c+"_")                        c_name= os.path.join(fullpath,name_of_f+".mdp")                        md=open(c_name,"w")                        md.write("integrator  = steep \n emtol       = 1000.0 \n emstep      = 0.01\n nsteps      = 50000 \n nstxout = 10\n"                         "  nstlist =1 \n cutoff-scheme   = Verlet \n ns_type         = grid \n coulombtype     = PME \n rcoulomb   = 1.0 \n  "                         "rvdw  = 1.0 \n pbc = xyz")                        md.close()                        print(md)                        min_md=os.path.join(fullpath,name_of_f+".sh")                        min_m= open(min_md, "w")                        id_chain=chain.get_id()                        md_p=structure.get_id()+"_"+chain.get_id()+"_"                        #print(md_p)                        min_m.write("gmx pdb2gmx -f " +id_chain+".pdb -o protein.gro -ignh -ff oplsaa -water spce \n "                        "gmx editconf -f protein.gro -o box.gro -bt cubic -d 1.0 \n"                        "gmx grompp -f "+md_p+".mdp -c solv.gro -p topol.top -o ions.tpr\n"                        "gmx genion -s ions.tpr -o ions.gro -p topol.top -pname NA -nname CL -neutral\n"                        "gmx grompp -f minim.mdp -c ions.gro -p topol.top -o em.tpr -maxwarn 1\n "                        "gmx mdrun -v -deffnm em\n "                        "gmx editconf -f em.gro -o protein_minimized.pdb")                        min_m.close()                        print(min_m)    return Truedef create_config(structure, chain, res, coords):    model = structure[0]    save_path = structure+"\\"+chain    name_of_file = structure + "_" + chain + "_" + res    completeName = os.path.join(save_path, name_of_file + ".conf")    conf = open(completeName, "w")    conf.write("receptor = " + structure + ".pdbqt\n" + "size_x = 30\nsize_y=30\nsize_z=30" + "\ncenter_x = " + str(coords[0]) + "\ncenter_y = " + str(coords[1]) + "\ncenter_z = " + str(coords[2]))    conf.close()    print(conf)    return Truedef hetero(structure):            for model in structure:                print(model.get_id())                for chain in model:                    print(chain.get_id())                    for residue in chain.get_list():                        residue_id= residue.get_id()                        hetfield = residue_id[0]                        if hetfield[0] == "H" and 'CA' not in residue.get_resname() and 'ZN' not in residue.get_resname() and 'MG' not in residue.get_resname() and 'CL' not in residue.get_resname() and 'GOL' not in residue.get_resname() and 'EDO' not in residue.get_resname() and 'EHO' not in residue.get_resname() and 'PTR' not in residue.get_resname() and 'SO4' not in residue.get_resname():                            print(residue.get_atoms)                            print(chain.get_id(), residue.get_resname(), residue.get_list()[0].get_coord())                            create_config(structure.get_id(), chain.get_id(), residue.get_resname(), residue.get_list()[0].get_coord())